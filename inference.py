# -*- coding: utf-8 -*-
"""Inference

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GM-Ah4-sN8Kv1IMlYT5gkK3mQR8KAWZR
"""

class Net1(nn.Module):

    def __init__(self):
        super().__init__()

        self.fc1 = nn.Linear(784,256)
        self.fc2 = nn.Linear(256,128)
        self.fc3 = nn.Linear(128, 64)
        self.fc4 = nn.Linear(64,11)

        self.dropout = nn.Dropout(0.2)
        

    def forward(self, x):
        # one activated conv layer
        x = x.view(x.shape[0], -1)
        x = self.dropout(F.relu(self.fc1(x)))
        x = self.dropout(F.relu(self.fc2(x)))
        x = self.dropout(F.relu(self.fc3(x)))
        x = F.log_softmax(self.fc4(x), dim=1)

        return x
cnn = Net1()

model = Net1()
continued_optimizer = optim.SGD(model.parameters(), lr=0.001,
                                momentum=0.5)

network_state_dict = torch.load("/content/drive/MyDrive/model/modelfix.pth")
model.load_state_dict(network_state_dict)

optimizer_state_dict = torch.load("/content/drive/MyDrive/model/optimizerfix.pth")
continued_optimizer.load_state_dict(optimizer_state_dict)

mean = [0.2859]
std = [0.3530]



image_transform = transforms.Compose([
    transforms.Resize((28, 28)),
    transforms.ToTensor(),
    transforms.Normalize(torch.Tensor(mean), torch.Tensor(std))
])

def classify(model,image_transform, image_path, classes):
  model = model.eval()
  image = Image.open(image_path).convert('L')
  image = image.resize((28, 28))
  image = image_transform(image).float()
  image = image.unsqueeze(axis=0)

  output = model(image)
  _, predicted = torch.max(output, 1)
  print(classes[predicted.item()])

image_paths = "/content/drive/MyDrive/jury/Copy of mnist_358.png"
classify(model, image_transform, image_paths, classes)
image = Image.open(image_paths)
plt.imshow(image, cmap='gray')